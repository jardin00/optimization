{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPThFhZvp88+XptAMkjbvel"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"C2SXrU1T6ULK"},"outputs":[],"source":["!pip -q install gurobipy==11.0.3 # Colab에 Gurobi 설치\n","import gurobipy as gp\n","from gurobipy import Model, GRB, quicksum\n","import networkx as nx\n","import matplotlib.pyplot as plt\n","import matplotlib.cm as cm"]},{"cell_type":"markdown","source":["# Set, Parameter"],"metadata":{"id":"ymug-ir3c3ZR"}},{"cell_type":"code","source":["# ---------------------------\n","# Sets\n","# ---------------------------\n","I = [\"i1\",\"i2\",\"i3\",\"i4\",\"i5\",\"i6\"]        # 고객 집합\n","J = [\"j1\",\"j2\",\"j3\",\"j4\"]        # 창고 집합\n","K = [\"k1\",\"k2\",\"k3\"]        # 공장 집합\n","L = [\"A\",\"B\",\"C\"]          # 제품 집합\n","T = [1,2,3]              # 기간 집합\n","\n","Jc = {\"j1\"}            # 필수 창고 (1기부터 운영)\n","J0 = set(J) - Jc       # 선택 창고\n","Kc = {\"k1\"}            # 필수 공장\n","K0 = set(K) - Kc       # 선택 공장\n","\n","t1, tT = min(T), max(T)   # 첫 기간, 마지막 기간"],"metadata":{"id":"r11AtKXQEMws"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# -----------------------------\n","# 1. 랜덤 좌표 생성 (문제상황)\n","# -----------------------------\n","np.random.seed(42)\n","coords = {}\n","for k in K:\n","    coords[k] = np.random.rand(2) * [10, 5]\n","for j in J:\n","    coords[j] = np.random.rand(2) * [10, 5]\n","for i in I:\n","    coords[i] = np.random.rand(2) * [10, 5]\n","\n","def plot_problem(coords, I, J, K):\n","    plt.figure(figsize=(10,6))\n","\n","    # Plants\n","    for k in K:\n","        plt.scatter(*coords[k], s=300, c=\"white\", edgecolors=\"green\", marker=\"s\", linewidths=2)\n","        plt.text(coords[k][0], coords[k][1]+0.2, f\"Plant {k}\", ha=\"center\")\n","\n","    # Warehouses\n","    for j in J:\n","        plt.scatter(*coords[j], s=300, c=\"white\", edgecolors=\"red\", marker=\"^\", linewidths=2)\n","        plt.text(coords[j][0], coords[j][1]+0.2, f\"WH {j}\", ha=\"center\")\n","\n","    # Customers\n","    for i in I:\n","        plt.scatter(*coords[i], s=300, c=\"lightblue\", edgecolors=\"black\", marker=\"o\", linewidths=2)\n","        plt.text(coords[i][0], coords[i][1]+0.2, f\"Cust {i}\", ha=\"center\")\n","\n","    # 연결선 (가능한 경로, 점선)\n","    for k in K:\n","        for j in J:\n","            x1,y1 = coords[k]; x2,y2 = coords[j]\n","            plt.plot([x1,x2],[y1,y2],'k--',alpha=0.3)\n","    for j in J:\n","        for i in I:\n","            x1,y1 = coords[j]; x2,y2 = coords[i]\n","            plt.plot([x1,x2],[y1,y2],'k--',alpha=0.3)\n","\n","    plt.title(\"Problem Setting: Candidate Facilities and Customers\", fontsize=14)\n","    plt.xlabel(\"X coord\")\n","    plt.ylabel(\"Y coord\")\n","    plt.show()\n","\n","plot_problem(coords, I, J, K)\n"],"metadata":{"id":"yOvuiKVMQ5kN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ---------------------------\n","# Parameters\n","# ---------------------------\n","import numpy as np\n","\n","np.random.seed(42)\n","\n","# ---------------------------\n","# 고객 수요 d_{i l}^t\n","# ---------------------------\n","d = {}\n","total_demand = 0\n","for i in I:\n","    for l in L:\n","        for t in T:\n","            val = np.random.randint(5, 15)   # 각 고객-제품-기간 수요\n","            d[i,l,t] = val\n","            total_demand += val\n","\n","\n","# ---------------------------\n","# 창고 용량 W_j^t\n","# ---------------------------\n","W = {}\n","warehouse_capacity_total = int(total_demand * 1.2)  # 총 수요의 120% 확보\n","cap_per_wh = warehouse_capacity_total // (len(J)*len(T))\n","\n","for j in J:\n","    for t in T:\n","        W[j,t] = cap_per_wh\n","\n","# ---------------------------\n","# 공장 용량 C_k^t\n","# ---------------------------\n","C = {}\n","plant_capacity_total = int(total_demand * 1.5)  # 총 수요의 150% 확보\n","cap_per_pl = plant_capacity_total // (len(K)*len(T))\n","\n","for k in K:\n","    for t in T:\n","        C[k,t] = cap_per_pl\n","\n","# ---------------------------\n","# 비용 (운송 + 운영)\n","# ---------------------------\n","c = {(i,j,l,t): round(np.random.uniform(1.0, 3.0),2)\n","     for i in I for j in J for l in L for t in T}   # 창고→고객\n","b = {(j,k,l,t): round(np.random.uniform(0.5, 2.0),2)\n","     for j in J for k in K for l in L for t in T}   # 공장→창고\n","f = {(j,t): np.random.randint(5, 10) for j in J for t in T}  # 창고 운영비\n","g = {(k,t): np.random.randint(8, 15) for k in K for t in T}  # 공장 운영비\n","\n","# ---------------------------\n","# 최소 개수 정책\n","# ---------------------------\n","ND1, NDT = 1, 1    # 최소 창고 개수\n","NC1, NCT = 1, 1    # 최소 공장 개수"],"metadata":{"id":"WEKoW54WEOSP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ---------------------------\n","# 파라미터 출력 정리\n","# ---------------------------\n","\n","print(\"총 수요량 (all customers, products, periods):\", total_demand)\n","print(\"=\"*50)\n","\n","# 고객 수요\n","print(\"\\n[고객 수요 d[i,l,t]]\")\n","for t in T:\n","    print(f\"\\nPeriod {t}:\")\n","    for i in I:\n","        row = [d[i,l,t] for l in L]\n","        print(f\" Customer {i}: {dict(zip(L, row))}\")\n","\n","# 창고 용량\n","print(\"\\n[창고 용량 W[j,t]]\")\n","for t in T:\n","    row = {j: W[j,t] for j in J}\n","    print(f\" Period {t}: {row}\")\n","\n","# 공장 용량\n","print(\"\\n[공장 용량 C[k,t]]\")\n","for t in T:\n","    row = {k: C[k,t] for k in K}\n","    print(f\" Period {t}: {row}\")\n","\n","# 비용: 예시는 일부만 출력 (전체는 너무 김)\n","print(\"\\n[창고 운영비 f[j,t]]\")\n","for t in T:\n","    row = {j: f[j,t] for j in J}\n","    print(f\" Period {t}: {row}\")\n","\n","print(\"\\n[공장 운영비 g[k,t]]\")\n","for t in T:\n","    row = {k: g[k,t] for k in K}\n","    print(f\" Period {t}: {row}\")\n","\n","print(\"\\n[창고→고객 운송비 c[i,j,l,t]] (Period 1, Product A 예시)\")\n","for i in I:\n","    row = {j: c[i,j,\"A\",1] for j in J}\n","    print(f\" Customer {i}: {row}\")\n","\n","print(\"\\n[공장→창고 운송비 b[j,k,l,t]] (Period 1, Product A 예시)\")\n","for j in J:\n","    row = {k: b[j,k,\"A\",1] for k in K}\n","    print(f\" Warehouse {j}: {row}\")\n"],"metadata":{"id":"iaiYgS3BejP0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 여기부터 빈칸 채워주세요!!"],"metadata":{"id":"SGcwqLPqcMmO"}},{"cell_type":"code","source":["# model 생성\n","m = Model()\n","\n","# ---------------------------\n","# Decision Variables\n","# ---------------------------\n","x = m.addVars(I,J,L,T, vtype=GRB.CONTINUOUS, lb=0.0, name=\"x\")                 # 고객 수요를 창고에서 얼마나 충족시키는지 (비율)\n","y = m.addVars(J,K,L,T, vtype=GRB.CONTINUOUS, lb=0.0, name=\"y\")                 # 창고 용량을 공장이 얼마나 공급하는지 (비율)\n","u = m.addVars(\"빈칸 채워주세요\" name=\"u\")           # 창고 개폐 여부 (0/1)\n","v = m.addVars(\"빈칸 채워주세요\" name=\"v\")           # 공장 개폐 여부 (0/1)\n"],"metadata":{"id":"clvi3gw6EyKN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ---------------------------\n","# 목적함수 (Objective)\n","#   총 비용 최소화:\n","#   운송비 (창고→고객, 공장→창고) + 운영비 (창고, 공장)\n","# ---------------------------\n","obj_wc = quicksum(\"빈칸 채워주세요\")\n","obj_pw = quicksum(\"빈칸 채워주세요\")\n","obj_wc_fix = quicksum(\"빈칸 채워주세요\")\n","obj_pw_fix = quicksum(\"빈칸 채워주세요\")\n","m.setObjective(\"빈칸 채워주세요\")\n"],"metadata":{"id":"ALe-IeAxFEqU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ---------------------------\n","# 제약조건 (Constraints) (1)~(8)\n","# ---------------------------\n","\n","# (1) 수요 충족: 각 고객-제품-기간 수요는 반드시 충족\n","for i in I:\n","    for l in L:\n","        for t in T:\n","            if d[i,l,t] > 0:\n","                m.addConstr(\"빈칸 채워주세요\", name=f\"(1)_demand[{i},{l},{t}]\")\n","\n","# (2) 창고 용량 제약\n","for j in J:\n","    for t in T:\n","        m.addConstr(\"빈칸 채워주세요\",name=f\"(2)_wh_cap[{j},{t}]\")\n","\n","# (3) 창고 흐름 보존: 들어온 물량 ≥ 나간 물량\n","for j in J:\n","    for l in L:\n","        for t in T:\n","            m.addConstr(\"빈칸 채워주세요\", name=f\"(3)_wh_flow[{j},{l},{t}]\")\n","\n","# (4) 공장 용량 제약\n","for k in K:\n","    for t in T:\n","        m.addConstr(\"빈칸 채워주세요\",name=f\"(4)_pl_cap[{k},{t}]\")\n","\n","# (5) 최소 창고 개수 제약 (첫/마지막 기간)\n","m.addConstr(\"빈칸 채워주세요\", name=\"(5)_min_wh_first\")\n","m.addConstr(\"빈칸 채워주세요\", name=\"(5)_min_wh_last\")\n","\n","# (6) 최소 공장 개수 제약 (첫/마지막 기간)\n","m.addConstr(\"빈칸 채워주세요\", name=\"(6)_min_pl_first\")\n","m.addConstr(\"빈칸 채워주세요\", name=\"(6)_min_pl_last\")\n","\n","# (7) 창고 개폐 정책\n","for j in Jc:\n","    m.addConstr(\"빈칸 채워주세요\", name=f\"(7)_wh_start_open[{j}]\")   # 필수 창고는 첫 기간에 반드시 열려야 함\n","    for t in T[:-1]:\n","        m.addConstr(\"빈칸 채워주세요\", name=f\"(7)_wh_no_reopen[{j},{t}]\")  # 닫히면 다시 못 엶\n","for j in J0:\n","    for t in T[:-1]:\n","        m.addConstr(\"빈칸 채워주세요\", name=f\"(7)_wh_stay_open[{j},{t}]\")  # 한번 열리면 계속 열려 있어야 함\n","\n","# (8) 공장 개폐 정책\n","for k in Kc:\n","    m.addConstr(\"빈칸 채워주세요\", name=f\"(8)_pl_start_open[{k}]\")   # 필수 공장은 첫 기간에 열려야 함\n","    for t in T[:-1]:\n","        m.addConstr(\"빈칸 채워주세요\", name=f\"(8)_pl_no_reopen[{k},{t}]\")\n","for k in K0:\n","    for t in T[:-1]:\n","        m.addConstr(\"빈칸 채워주세요\", name=f\"(8)_pl_stay_open[{k},{t}]\")"],"metadata":{"id":"bOHXacd1FD0X"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# ---------------------------\n","# 최적화 실행\n","# ---------------------------\n","m.optimize()\n"],"metadata":{"id":"czdUn6XGMUkk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 결과확인"],"metadata":{"id":"KVG4FTonczAx"}},{"cell_type":"code","source":["# ---------------------------\n","# 결과 출력\n","# ---------------------------\n","print(\"\\n목적함수 값 (총 비용):\", round(m.objVal,3))\n","\n","print(\"\\n기간별 개설 창고:\")\n","for t in T:\n","    print(f\"t={t} ->\", [j for j in J if u[j,t].X > 0.5])\n","\n","print(\"\\n기간별 개설 공장:\")\n","for t in T:\n","    print(f\"t={t} ->\", [k for k in K if v[k,t].X > 0.5])\n","\n","print(\"\\n창고→고객 흐름:\")\n","for t in T:\n","    for l in L:\n","        for j in J:\n","            served = sum(d[i,l,t]*x[i,j,l,t].X for i in I)\n","            if served > 1e-6:\n","                print(f\"t={t}, 제품={l}, 창고={j}, 출고량={served:.2f}\")\n","\n","print(\"\\n공장→창고 흐름:\")\n","for t in T:\n","    for l in L:\n","        for k in K:\n","            for j in J:\n","                amount = W[j,t]*y[j,k,l,t].X\n","                if amount > 1e-6:\n","                    print(f\"t={t}, 제품={l}, 공장={k} -> 창고={j}, 공급량={amount:.2f}\")"],"metadata":{"id":"xdMNSBy3MW4b"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def plot_solution_map(t, I, J, K, L, u, v, x, y, d, W, coords):\n","    plt.figure(figsize=(10,6))\n","\n","    # --- 노드 ---\n","    for k in K:\n","        chosen = v[k,t].X > 0.5\n","        plt.scatter(*coords[k], s=400, c=\"lightgreen\" if chosen else \"white\",\n","                    edgecolors=\"green\", marker=\"s\", linewidths=2)\n","        plt.text(coords[k][0], coords[k][1]+0.2, f\"Plant {k}\", ha=\"center\")\n","\n","    for j in J:\n","        chosen = u[j,t].X > 0.5\n","        plt.scatter(*coords[j], s=400, c=\"orange\" if chosen else \"white\",\n","                    edgecolors=\"red\", marker=\"^\", linewidths=2)\n","        plt.text(coords[j][0], coords[j][1]+0.2, f\"WH {j}\", ha=\"center\")\n","\n","    for i in I:\n","        plt.scatter(*coords[i], s=400, c=\"lightblue\", edgecolors=\"black\", marker=\"o\", linewidths=2)\n","        plt.text(coords[i][0], coords[i][1]+0.2, f\"Cust {i}\", ha=\"center\")\n","\n","    # --- 품목별 색상 팔레트 ---\n","    import matplotlib.cm as cm\n","    cmap = cm.get_cmap(\"tab10\", len(L))\n","    color_map = {l: cmap(idx) for idx,l in enumerate(L)}\n","\n","    # --- 흐름: Plant→Warehouse ---\n","    for k in K:\n","        for j in J:\n","            for l in L:\n","                flow = W[j,t]*y[j,k,l,t].X\n","                if flow > 1e-6:\n","                    x1,y1 = coords[k]; x2,y2 = coords[j]\n","                    plt.arrow(x1, y1, x2-x1, y2-y1,\n","                              width=0.002*flow, color=color_map[l], alpha=0.6,\n","                              length_includes_head=True)\n","\n","    # --- 흐름: Warehouse→Customer ---\n","    for j in J:\n","        for i in I:\n","            for l in L:\n","                flow = d[i,l,t]*x[i,j,l,t].X\n","                if flow > 1e-6:\n","                    x1,y1 = coords[j]; x2,y2 = coords[i]\n","                    plt.arrow(x1, y1, x2-x1, y2-y1,\n","                              width=0.002*flow, color=color_map[l], alpha=0.6,\n","                              length_includes_head=True)\n","\n","    # --- 범례 ---\n","    legend_elements = [\n","        plt.Line2D([0],[0], marker='s', color='w', label='Open Plant',\n","                   markerfacecolor='lightgreen', markeredgecolor='green', markersize=12),\n","        plt.Line2D([0],[0], marker='s', color='w', label='Closed Plant',\n","                   markerfacecolor='white', markeredgecolor='black', markersize=12),\n","        plt.Line2D([0],[0], marker='^', color='w', label='Open Warehouse',\n","                   markerfacecolor='orange', markeredgecolor='red', markersize=12),\n","        plt.Line2D([0],[0], marker='^', color='w', label='Closed Warehouse',\n","                   markerfacecolor='white', markeredgecolor='black', markersize=12),\n","        plt.Line2D([0],[0], marker='o', color='w', label='Customer',\n","                   markerfacecolor='lightblue', markeredgecolor='black', markersize=12)\n","    ]\n","    for l in L:\n","        legend_elements.append(\n","            plt.Line2D([0],[0], color=color_map[l], lw=3, label=f\"Flow of Product {l}\")\n","        )\n","\n","    # 범례를 오른쪽 밖에 표시\n","    plt.legend(handles=legend_elements, bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=10)\n","\n","    plt.title(f\"Optimization Result (Period {t})\", fontsize=14)\n","    plt.xlabel(\"X coord\")\n","    plt.ylabel(\"Y coord\")\n","    plt.tight_layout()\n","    plt.show()\n","\n","# 실행: 시기별 결과\n","for t in T:\n","    plot_solution_map(t, I, J, K, L, u, v, x, y, d, W, coords)\n"],"metadata":{"id":"nZoyk_BKRHeO"},"execution_count":null,"outputs":[]}]}